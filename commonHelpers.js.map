{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('button[data-start]');\nconst timerDays = document.querySelector('[data-days]');\nconst timerHours = document.querySelector('[data-hours]');\nconst timerMinutes = document.querySelector('[data-minutes]');\nconst timerSeconds = document.querySelector('[data-seconds]');\n\nstartButton.disabled = true;\n\nflatpickr(datePicker, {\n  enableTime: true,\n  time_24hr: true,\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate < new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Будь ласка, оберіть дату у майбутньому',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n});\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor((ms % hour) / minute);\n  const seconds = Math.floor((ms % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nlet countdownTimer;\n\nstartButton.addEventListener('click', () => {\n  const selectedDate = flatpickr.parseDate(datePicker.value);\n  datePicker.disabled = true;\n  startButton.disabled = true;\n\n  function updateTimer() {\n    const currentTime = new Date().getTime();\n    const difference = selectedDate - currentTime;\n\n    if (difference <= 0) {\n      clearInterval(countdownTimer);\n      iziToast.success({\n        title: 'Finished',\n        message: 'Таймер завершено',\n      });\n      datePicker.disabled = false;\n      startButton.disabled = false;\n    } else {\n      const timeLeft = convertMs(difference);\n      timerDays.textContent = addLeadingZero(timeLeft.days);\n      timerHours.textContent = addLeadingZero(timeLeft.hours);\n      timerMinutes.textContent = addLeadingZero(timeLeft.minutes);\n      timerSeconds.textContent = addLeadingZero(timeLeft.seconds);\n    }\n  }\n\n  updateTimer();\n  countdownTimer = setInterval(updateTimer, 1000);\n});\n"],"names":["datePicker","startButton","timerDays","timerHours","timerMinutes","timerSeconds","flatpickr","selectedDates","iziToast","addLeadingZero","value","convertMs","ms","days","hours","minutes","seconds","countdownTimer","selectedDate","updateTimer","currentTime","difference","timeLeft"],"mappings":"6vBAKA,MAAMA,EAAa,SAAS,eAAe,iBAAiB,EACtDC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5DJ,EAAY,SAAW,GAEvBK,EAAUN,EAAY,CACpB,WAAY,GACZ,UAAW,GACX,gBAAiB,EACjB,QAAQO,EAAe,CACAA,EAAc,CAAC,EACjB,IAAI,MACrBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,wCACjB,CAAO,EACDP,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,CAAC,EAED,SAASQ,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAOH,EAAK,KAAQ,GAAM,EACzCI,EAAU,KAAK,MAAOJ,EAAK,IAAU,GAAM,EAEjD,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,IAAIC,EAEJhB,EAAY,iBAAiB,QAAS,IAAM,CAC1C,MAAMiB,EAAeZ,EAAU,UAAUN,EAAW,KAAK,EACzDA,EAAW,SAAW,GACtBC,EAAY,SAAW,GAEvB,SAASkB,GAAc,CACrB,MAAMC,EAAc,IAAI,KAAM,EAAC,QAAO,EAChCC,EAAaH,EAAeE,EAElC,GAAIC,GAAc,EAChB,cAAcJ,CAAc,EAC5BT,EAAS,QAAQ,CACf,MAAO,WACP,QAAS,kBACjB,CAAO,EACDR,EAAW,SAAW,GACtBC,EAAY,SAAW,OAClB,CACL,MAAMqB,EAAWX,EAAUU,CAAU,EACrCnB,EAAU,YAAcO,EAAea,EAAS,IAAI,EACpDnB,EAAW,YAAcM,EAAea,EAAS,KAAK,EACtDlB,EAAa,YAAcK,EAAea,EAAS,OAAO,EAC1DjB,EAAa,YAAcI,EAAea,EAAS,OAAO,CAC3D,CACF,CAEDH,IACAF,EAAiB,YAAYE,EAAa,GAAI,CAChD,CAAC"}